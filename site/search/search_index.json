{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WIP DevOps Ramp-up Welcome DevOps has a wide variety of practices, tools, and methodologies, which enable it to be an important part of an agile delivery culture . This ramp-up is presented as a series of challenges . Each challenge is chosen to show beginners the basics of some of the DevOps practices, and it is designed to help us use the same language after its completion. We are tool agnostics, so you can use any tool you like, but we do have a client base that needs us to be proficient in some basic AWS concepts. Projects In order to complete the challenges posed in this repo, you will have a series of projects from which you could select the one you feel most comfortable with. The idea is you have to complete as many challenges as possible. It's recommended to follow the order proposed in the challenge section below. Movie Analyst This application is a web application based on a 3-tier architecture model develop in javascript. For this application you will have to write some code in order to make it work as expected. The app needs to communicate with the DB and retrieves the data from it. ```bash git clone https://github.com/juan-ruiz/movie-analyst-api.git git clone https://github.com/juan-ruiz/movie-analyst-ui.git ``` Challenges Linux basics Basic concepts to deploy an application Scripting Source Code Management \u2013 SCM Cloud basics Infrastructure as code \u2013 IaC Server configuration management CI/CD Monitoring Containerization Container orchestration","title":"Home"},{"location":"#wip","text":"","title":"WIP"},{"location":"#devops-ramp-up","text":"","title":"DevOps Ramp-up"},{"location":"#welcome","text":"DevOps has a wide variety of practices, tools, and methodologies, which enable it to be an important part of an agile delivery culture . This ramp-up is presented as a series of challenges . Each challenge is chosen to show beginners the basics of some of the DevOps practices, and it is designed to help us use the same language after its completion. We are tool agnostics, so you can use any tool you like, but we do have a client base that needs us to be proficient in some basic AWS concepts.","title":"Welcome"},{"location":"#projects","text":"In order to complete the challenges posed in this repo, you will have a series of projects from which you could select the one you feel most comfortable with. The idea is you have to complete as many challenges as possible. It's recommended to follow the order proposed in the challenge section below. Movie Analyst This application is a web application based on a 3-tier architecture model develop in javascript. For this application you will have to write some code in order to make it work as expected. The app needs to communicate with the DB and retrieves the data from it. ```bash git clone https://github.com/juan-ruiz/movie-analyst-api.git git clone https://github.com/juan-ruiz/movie-analyst-ui.git ```","title":"Projects"},{"location":"#challenges","text":"Linux basics Basic concepts to deploy an application Scripting Source Code Management \u2013 SCM Cloud basics Infrastructure as code \u2013 IaC Server configuration management CI/CD Monitoring Containerization Container orchestration","title":"Challenges"},{"location":"basic_concepts_to_deploy_an_application/","text":"Basic concepts to deploy an application Now that you understand the basics of how GNU/Linux works, it\u2019s time to start playing with the application. The first thing we need to understand is how to convert the application code into something that you can use and install on a system. To complete this challenge, you are required to: Create a GNU/Linux virtual machine. The decision of what distro to use is up to you. For applications with a multitier architecture (e.g., applications where presentation (frontend), processing (backend), and data management (database, cache server, etc), are separated services), you can also choose whether to create one VM for all services or one for each service. If you have a little bit of knowledge on any cloud provider and want to save the time to install and configure a VM, you can also set up an instance there, but keep in mind that it will cost more money. Bonus points: Use Vagrant to set up your VMs. It will serve the purpose of introducing you to the * as code principle, which will become very important in this RampUp and your professional career. Install everything you need to run the application. The application may require some software to be installed in the system to run properly (e.g., to run a Java server application, you will need JRE and an application server such as Tomcat), or maybe you need to run a database system or configure some environment variables. Run the application with best practices. There are many ways to run an application, some of them better suited for testing environments, others for production. Find what are the best practices to do for a production environment . Maybe you need to configure an NGINX server, or use Tomcat, etc. Find what works best for the application you have. Keep in mind what happens if you restart your machine, do you need to start the service manually again or it happens automatically? On which port are you going to expose the application? And remember, everything you do must be done on a terminal! We want you to learn how things work on the inside. Note: Write down every step or command you execute. You\u2019ll need that later in this RampUp.","title":"Basic concepts to deploy an application"},{"location":"basic_concepts_to_deploy_an_application/#basic-concepts-to-deploy-an-application","text":"Now that you understand the basics of how GNU/Linux works, it\u2019s time to start playing with the application. The first thing we need to understand is how to convert the application code into something that you can use and install on a system. To complete this challenge, you are required to: Create a GNU/Linux virtual machine. The decision of what distro to use is up to you. For applications with a multitier architecture (e.g., applications where presentation (frontend), processing (backend), and data management (database, cache server, etc), are separated services), you can also choose whether to create one VM for all services or one for each service. If you have a little bit of knowledge on any cloud provider and want to save the time to install and configure a VM, you can also set up an instance there, but keep in mind that it will cost more money. Bonus points: Use Vagrant to set up your VMs. It will serve the purpose of introducing you to the * as code principle, which will become very important in this RampUp and your professional career. Install everything you need to run the application. The application may require some software to be installed in the system to run properly (e.g., to run a Java server application, you will need JRE and an application server such as Tomcat), or maybe you need to run a database system or configure some environment variables. Run the application with best practices. There are many ways to run an application, some of them better suited for testing environments, others for production. Find what are the best practices to do for a production environment . Maybe you need to configure an NGINX server, or use Tomcat, etc. Find what works best for the application you have. Keep in mind what happens if you restart your machine, do you need to start the service manually again or it happens automatically? On which port are you going to expose the application? And remember, everything you do must be done on a terminal! We want you to learn how things work on the inside. Note: Write down every step or command you execute. You\u2019ll need that later in this RampUp.","title":"Basic concepts to deploy an application"},{"location":"ci-cd/","text":"CI/CD In a real development project, usually, there are a bunch of people working to create new features or change the existing ones, developers, testers, project managers, stakeholders, etc. All those people are always focused on creating a product with good quality and in the faster way they can. But once that product is created, what do we do with it? How do we deliver it to the final client in the fastest and reliable way can? How do we make sure the product we are releasing is not broken or contains bugs? CI We will break the challenges in two parts, the first part will be about continuous integration and the second part about continuous deployment/delivery. In the first part you\u2019ll design and setup your CI pipeline: Design and create a diagram of your continuous integration pipeline. In this stage is very important to internalize the concepts and terminology of CI, so, focus on that instead of searching about tools. Also, don\u2019t think about deployment yet, this will come in a later stage Research and choose an automation server. There is a big list to choose from (Travis, Jenkins, CircleCI, Gitlab, Bamboo, etc). Again, feel free to choose whatever you like the most. Implement the pipeline you created in the tool you chose. If you feel something is not right with your diagram, make the necessary adjustment. CD Hopefully and the end of point 3 you will end up with a fully tested artifact ready to be deployed. Now it\u2019s time to deploy your artifact in your infrastructure: Design and implement your deployment process. Every application is different, so choose the right tools and process to deploy your application in your infrastructure. Choose the policies of when you are going to deploy. For example, you may need to trigger the build process automatically in case there\u2019s a change in a specific branch, or maybe someone needs to press a button, etc. Also, imagine you are part of an organization, who is allowed to deploy? How are you going to enforce that? Research and learn about deployment strategies and choose one to implement your project. Implement your deployment solution. Maybe you want to choose a tool provided by your cloud provider or a third party, or maybe you want to implement your own solution based on the tools you already know. Be creative here!","title":"CI/CD"},{"location":"ci-cd/#cicd","text":"In a real development project, usually, there are a bunch of people working to create new features or change the existing ones, developers, testers, project managers, stakeholders, etc. All those people are always focused on creating a product with good quality and in the faster way they can. But once that product is created, what do we do with it? How do we deliver it to the final client in the fastest and reliable way can? How do we make sure the product we are releasing is not broken or contains bugs?","title":"CI/CD"},{"location":"ci-cd/#ci","text":"We will break the challenges in two parts, the first part will be about continuous integration and the second part about continuous deployment/delivery. In the first part you\u2019ll design and setup your CI pipeline: Design and create a diagram of your continuous integration pipeline. In this stage is very important to internalize the concepts and terminology of CI, so, focus on that instead of searching about tools. Also, don\u2019t think about deployment yet, this will come in a later stage Research and choose an automation server. There is a big list to choose from (Travis, Jenkins, CircleCI, Gitlab, Bamboo, etc). Again, feel free to choose whatever you like the most. Implement the pipeline you created in the tool you chose. If you feel something is not right with your diagram, make the necessary adjustment.","title":"CI"},{"location":"ci-cd/#cd","text":"Hopefully and the end of point 3 you will end up with a fully tested artifact ready to be deployed. Now it\u2019s time to deploy your artifact in your infrastructure: Design and implement your deployment process. Every application is different, so choose the right tools and process to deploy your application in your infrastructure. Choose the policies of when you are going to deploy. For example, you may need to trigger the build process automatically in case there\u2019s a change in a specific branch, or maybe someone needs to press a button, etc. Also, imagine you are part of an organization, who is allowed to deploy? How are you going to enforce that? Research and learn about deployment strategies and choose one to implement your project. Implement your deployment solution. Maybe you want to choose a tool provided by your cloud provider or a third party, or maybe you want to implement your own solution based on the tools you already know. Be creative here!","title":"CD"},{"location":"configuration_management/","text":"Server configuration management It\u2019s time to revisit the scripts you wrote in the challenge Scripting . In a traditional sysadmin world, usually, the configuration of servers (everything the server needs to work) are managed either manually or by a bunch of scripts that automate some processes. Imagine if one of those servers fails, our instinct would tell us to log in to that server, enter some commands, maybe change some configurations files, press some buttons or change one of those bash scripts we wrote. Great! the server is running again and now you can go home. Now imagine if you keep doing the same over and over; in the end, you will end up with a bunch of servers that everyone fears to touch because no one really knows how it works or how it\u2019s configured. Also, you\u2019ll find yourself making backups of those servers very often. That\u2019s what we call Snowflake servers and we should do whatever it takes to prevent that to happen. Fortunately, exists some tools that will help you to manage the configuration of your servers in an easier and more efficient way. Most of those tools will let you express the desired state of the system instead of a series of instructions or to achieve that state. The tool will do the necessary steps to convert the system from its current state to the state you specified. In this challenge you\u2019ll need to replicate the configurations you made in the scripting challenge using a configuration management tool: Research the available tools and pick one. Each tool has its advantages and disadvantages so, explain why you made that decision. Just like the Scripting challenge, create the code to provision your instance with everything the app needs to work but, in this case, using the tool you chose. Remember that your instances are now in the cloud and they should be disposable, meaning you should be able to destroy and recreate them anytime you want. Your implementation needs to able to detect if a new instance was created and configure it accordingly.","title":"Server configuration management"},{"location":"configuration_management/#server-configuration-management","text":"It\u2019s time to revisit the scripts you wrote in the challenge Scripting . In a traditional sysadmin world, usually, the configuration of servers (everything the server needs to work) are managed either manually or by a bunch of scripts that automate some processes. Imagine if one of those servers fails, our instinct would tell us to log in to that server, enter some commands, maybe change some configurations files, press some buttons or change one of those bash scripts we wrote. Great! the server is running again and now you can go home. Now imagine if you keep doing the same over and over; in the end, you will end up with a bunch of servers that everyone fears to touch because no one really knows how it works or how it\u2019s configured. Also, you\u2019ll find yourself making backups of those servers very often. That\u2019s what we call Snowflake servers and we should do whatever it takes to prevent that to happen. Fortunately, exists some tools that will help you to manage the configuration of your servers in an easier and more efficient way. Most of those tools will let you express the desired state of the system instead of a series of instructions or to achieve that state. The tool will do the necessary steps to convert the system from its current state to the state you specified. In this challenge you\u2019ll need to replicate the configurations you made in the scripting challenge using a configuration management tool: Research the available tools and pick one. Each tool has its advantages and disadvantages so, explain why you made that decision. Just like the Scripting challenge, create the code to provision your instance with everything the app needs to work but, in this case, using the tool you chose. Remember that your instances are now in the cloud and they should be disposable, meaning you should be able to destroy and recreate them anytime you want. Your implementation needs to able to detect if a new instance was created and configure it accordingly.","title":"Server configuration management"},{"location":"infrastructure_as_code/","text":"Infrastructure as code \u2013 IaC You\u2019ve made a terrific advance setting up your infrastructure in the cloud, but now, we can go one step further. Now, we\u2019ll learn how to manage the infrastructure using code! Imagine the possibilities, you now have all the advantages of using code; you can version your infra, easily revert to a previous state, you can replicate your entire stack within a few minutes, you can even blame and fire someone that screws with your application in production (please, don\u2019t do this). That and even more you can get with IaC. This may seem like something really difficult, but believe me, if you have a solid understanding of your cloud provider, you are almost set. For this challenge you will have to replicate what you did in the last challenge (Cloud basics) but using IaC: Choose an IaC tool. Learn about the options out there to implement this, and choose the one that you like the most. Implement all your infrastructure as code. Now, you must be able to destroy and create your infrastructure again using a single (or a couple of) command(s). Research and follow some of the best practices for the tool you chose (like the use of modules or the management of the state in Terraform). Now you don\u2019t have any excuses to shutdown your infra at nights! Always use a VCS! You can use the same repository that you use for the apps, or you can create a new one for this, or do both. Do whatever you think is best for the project!","title":"Infrastructure as code \u2013 IaC"},{"location":"infrastructure_as_code/#infrastructure-as-code-iac","text":"You\u2019ve made a terrific advance setting up your infrastructure in the cloud, but now, we can go one step further. Now, we\u2019ll learn how to manage the infrastructure using code! Imagine the possibilities, you now have all the advantages of using code; you can version your infra, easily revert to a previous state, you can replicate your entire stack within a few minutes, you can even blame and fire someone that screws with your application in production (please, don\u2019t do this). That and even more you can get with IaC. This may seem like something really difficult, but believe me, if you have a solid understanding of your cloud provider, you are almost set. For this challenge you will have to replicate what you did in the last challenge (Cloud basics) but using IaC: Choose an IaC tool. Learn about the options out there to implement this, and choose the one that you like the most. Implement all your infrastructure as code. Now, you must be able to destroy and create your infrastructure again using a single (or a couple of) command(s). Research and follow some of the best practices for the tool you chose (like the use of modules or the management of the state in Terraform). Now you don\u2019t have any excuses to shutdown your infra at nights! Always use a VCS! You can use the same repository that you use for the apps, or you can create a new one for this, or do both. Do whatever you think is best for the project!","title":"Infrastructure as code \u2013 IaC"},{"location":"linux_basics/","text":"Linux basics Most of our day is spent in front of a GNU/Linux terminal configuring stuff, debugging, reading logs, etc. You don\u2019t need to be the greatest expert in an operating system, but you must feel comfortable typing commands in front of a terminal and you must understand the basics about how GNU/Linux works. Note: We are tool agnostic, so, feel free to choose the operating system that you want (e.g., Windows server). However, GNU/Linux is the most widely used operating system around the world; most of the systems that you\u2019ll encounter during your career (at least in this decade) are going to be GNU/Linux servers (unless someone makes something better). To complete this, you are required to complete the challenges listed in https://cmdchallenge.com/ . Note: This challenge is optional. Feel free to skip it if you are comfortable with GNU/Linux commands. Recommended readings","title":"Linux Basic"},{"location":"linux_basics/#linux-basics","text":"Most of our day is spent in front of a GNU/Linux terminal configuring stuff, debugging, reading logs, etc. You don\u2019t need to be the greatest expert in an operating system, but you must feel comfortable typing commands in front of a terminal and you must understand the basics about how GNU/Linux works. Note: We are tool agnostic, so, feel free to choose the operating system that you want (e.g., Windows server). However, GNU/Linux is the most widely used operating system around the world; most of the systems that you\u2019ll encounter during your career (at least in this decade) are going to be GNU/Linux servers (unless someone makes something better). To complete this, you are required to complete the challenges listed in https://cmdchallenge.com/ . Note: This challenge is optional. Feel free to skip it if you are comfortable with GNU/Linux commands.","title":"Linux basics"},{"location":"linux_basics/#recommended-readings","text":"","title":"Recommended readings"},{"location":"scm/","text":"Source Code Management \u2013 SCM Now that we have some basics Ops skills, it\u2019s time to focus a little bit more on the Dev side of DevOps. Every serious software project, independence of how large or small it is, needs to be managed by a version control system (VCS). One of the central aspects of success on any DevOps implementation is the management of the source code. Without this, implementing practices like CI/CD would be impossible. Remember this: Everything should be versionable! Even things like infrastructure and configuration. The most popular VCS, by far, is git , which is what we will focus on. Again, you are free to choose whatever you want, but we recommend git. In this challenge, you'll set up a successful git branching model for the project repository that we choose. Search and read about the git branching model available in the industry. Select the one that you think fits better with the project. Also, if you feel like making any change to the model, then, go ahead. Who knows, maybe it can become the next trend in the industry. Make a diagram explaining the branching model. It doesn\u2019t need to be a pretty diagram, just to show the general idea of the model you chose. You can use a tool like draw.io or a simple pencil and paper. Apply the branching model to the repositories. You need to apply that strategy to every repository you\u2019ll use for this RampUp. For example, if you decide to upload your scripts (refer to Scripting) of your infrastructure code (refer to IaC) in different repos, apply that strategy in every single one of those repos. Even of those repos are not created yet, when you do so, apply a branching strategy to them (it could be different though) ## Recommended readings","title":"Source Code Management \u2013 SCM"},{"location":"scm/#source-code-management-scm","text":"Now that we have some basics Ops skills, it\u2019s time to focus a little bit more on the Dev side of DevOps. Every serious software project, independence of how large or small it is, needs to be managed by a version control system (VCS). One of the central aspects of success on any DevOps implementation is the management of the source code. Without this, implementing practices like CI/CD would be impossible. Remember this: Everything should be versionable! Even things like infrastructure and configuration. The most popular VCS, by far, is git , which is what we will focus on. Again, you are free to choose whatever you want, but we recommend git. In this challenge, you'll set up a successful git branching model for the project repository that we choose. Search and read about the git branching model available in the industry. Select the one that you think fits better with the project. Also, if you feel like making any change to the model, then, go ahead. Who knows, maybe it can become the next trend in the industry. Make a diagram explaining the branching model. It doesn\u2019t need to be a pretty diagram, just to show the general idea of the model you chose. You can use a tool like draw.io or a simple pencil and paper. Apply the branching model to the repositories. You need to apply that strategy to every repository you\u2019ll use for this RampUp. For example, if you decide to upload your scripts (refer to Scripting) of your infrastructure code (refer to IaC) in different repos, apply that strategy in every single one of those repos. Even of those repos are not created yet, when you do so, apply a branching strategy to them (it could be different though) ## Recommended readings","title":"Source Code Management \u2013 SCM"},{"location":"scripting/","text":"Scripting One of the most important principles on the DevOps culture is automation (look up what CAMS means \ud83d\ude0a). Your goal should be automating almost everything. Every time you make a manual task you need to ask yourself, \u201cWhat do I need to do if I don\u2019t want to do this again\u201d. And to automate we need to know how to code, at least, in one programming language. It\u2019s time to automate everything you did on the first challenge. For this challenge you will be required to: Choose one (or several) programming language(s). You are free to choose the language you like, but also keep in mind there are some languages that are preferred in the Sysadmin world (for example, Emojicode might not be a good choice). There\u2019s no need to stick to a single language, you can use as many as you want. (if you want suggestions, Python has a small learning curve and great scripting capabilities, and Go will give you more powerful features). Create one (or several) script(s) to automate the provisioning for the VM\u2019s that you created. The most important requirement is that for a new fresh VM with nothing else installed, the execution of that script must install and configure everything necessary to run the application. After the script finishes its execution, the application and all its dependencies must be up and running. Note: There\u2019s an alternative to this which we will work on the configuration management challenge. Try to make your scripts as idempotent (term to keep in mind) as you can , that way it doesn\u2019t matter how many times you execute the script, it will only do the necessary steps and nothing more. Use a VCS for all the code you write. We will talk more about this later in this RampUp. (refer to SCM) Recommended readings https://medium.com/@brunodelb/the-cams-model-to-better-understand-the-devops-movement-ffe6713c3fd7","title":"Scripting"},{"location":"scripting/#scripting","text":"One of the most important principles on the DevOps culture is automation (look up what CAMS means \ud83d\ude0a). Your goal should be automating almost everything. Every time you make a manual task you need to ask yourself, \u201cWhat do I need to do if I don\u2019t want to do this again\u201d. And to automate we need to know how to code, at least, in one programming language. It\u2019s time to automate everything you did on the first challenge. For this challenge you will be required to: Choose one (or several) programming language(s). You are free to choose the language you like, but also keep in mind there are some languages that are preferred in the Sysadmin world (for example, Emojicode might not be a good choice). There\u2019s no need to stick to a single language, you can use as many as you want. (if you want suggestions, Python has a small learning curve and great scripting capabilities, and Go will give you more powerful features). Create one (or several) script(s) to automate the provisioning for the VM\u2019s that you created. The most important requirement is that for a new fresh VM with nothing else installed, the execution of that script must install and configure everything necessary to run the application. After the script finishes its execution, the application and all its dependencies must be up and running. Note: There\u2019s an alternative to this which we will work on the configuration management challenge. Try to make your scripts as idempotent (term to keep in mind) as you can , that way it doesn\u2019t matter how many times you execute the script, it will only do the necessary steps and nothing more. Use a VCS for all the code you write. We will talk more about this later in this RampUp. (refer to SCM)","title":"Scripting"},{"location":"scripting/#recommended-readings","text":"https://medium.com/@brunodelb/the-cams-model-to-better-understand-the-devops-movement-ffe6713c3fd7","title":"Recommended readings"},{"location":"cloud-basics/aws/","text":"Cloud Basics - AWS This challenge aims to set up the cloud environment on which the project will run. Create a diagram that reflects the design of the infrastructure you will create in the next steps. Create the networking infrastructure on which your application will live. Setup a custom VPC. Create the subnets. Setup route tables for all subnets. Set up a connection to the internet (Internet Gateway and NAT). Configure security for your subnets (Network ACLs). Note: Because of constraints with the training AWS account, you may be required to use an existing networking infrastructure. In that case, explain your tutor each the elements involved and how they relate to each other. Make sure you don\u2019t skip this step; networking is an essential part of what we do! Create the ec2 infrastructure to support the application. If the application has one backend and one fronted, you will need to create one for each. Create a load balancer. Create a launch configuration or a launch template. Create an auto-scaling group. The expected behavior is: If you destroy one instance (or the application fails), another must be created automatically with the application running again. Note: If the application has any external service, like a database or cache system, you can either use a managed service by AWS (as RDS for SQL databases, or Amazon DocumentDB for MongoDB, etc.) Or install and manage the service by yourself. In a real production environment, we usually use managed services, but it's a great learning exercise to create all things by yourself. So, if you think you have time, we recommend following the second option, you\u2019ll learn tons of new stuff! Secure your infrastructure. Don\u2019t forget to always follow the principle of least privilege. Create security groups for all your resources (Instances, database, etc.). Decide carefully which ports you open and who can access them. Create IAM policies and roles to assign permissions to the applications. Create an Excel sheet with an estimate of the total cost of the infrastructure you created.","title":"AWS"},{"location":"cloud-basics/aws/#cloud-basics-aws","text":"This challenge aims to set up the cloud environment on which the project will run. Create a diagram that reflects the design of the infrastructure you will create in the next steps. Create the networking infrastructure on which your application will live. Setup a custom VPC. Create the subnets. Setup route tables for all subnets. Set up a connection to the internet (Internet Gateway and NAT). Configure security for your subnets (Network ACLs). Note: Because of constraints with the training AWS account, you may be required to use an existing networking infrastructure. In that case, explain your tutor each the elements involved and how they relate to each other. Make sure you don\u2019t skip this step; networking is an essential part of what we do! Create the ec2 infrastructure to support the application. If the application has one backend and one fronted, you will need to create one for each. Create a load balancer. Create a launch configuration or a launch template. Create an auto-scaling group. The expected behavior is: If you destroy one instance (or the application fails), another must be created automatically with the application running again. Note: If the application has any external service, like a database or cache system, you can either use a managed service by AWS (as RDS for SQL databases, or Amazon DocumentDB for MongoDB, etc.) Or install and manage the service by yourself. In a real production environment, we usually use managed services, but it's a great learning exercise to create all things by yourself. So, if you think you have time, we recommend following the second option, you\u2019ll learn tons of new stuff! Secure your infrastructure. Don\u2019t forget to always follow the principle of least privilege. Create security groups for all your resources (Instances, database, etc.). Decide carefully which ports you open and who can access them. Create IAM policies and roles to assign permissions to the applications. Create an Excel sheet with an estimate of the total cost of the infrastructure you created.","title":"Cloud Basics - AWS"},{"location":"cloud-basics/azure/","text":"Cloud Basics This challenge aims to set up the cloud environment on which the project will run. Create a diagram that reflects the design of the infrastructure you will create in the next steps. Create the networking infrastructure on which your application will live. Setup a custom VNet. Create the subnets. Configure security for your subnets (Subnet Security Groups). Note: Because of constraints with the training Azure account, you may be required to use an existing networking infrastructure. In that case, explain your tutor each the elements involved and how they relate to each other. Make sure you don\u2019t skip this step; networking is an essential part of what we do! Create the compute infrastructure to support the application. Is recommended to separate front-end and back-end. Create Virtual Machines and install the applications Capture Images that contains the application and configurations. Create an Scale Set Create a LoadBalancer or and Application Gateway (Read about both and understand the differences, explain why you decided to use the one you deploy) Create LoadBalancer between Front-End and Back-End The expected behavior is: If you destroy one instance (or the application fails), another must be created automatically with the application running again. Note: If the application has any external service, like a database or cache system, you can either use a managed service by Azure (as SQL databases, or Azure Database for MySQL, etc.) Or install and manage the service by yourself. In a real production environment, we usually use managed services, but it's a great learning exercise to create all things by yourself. So, if you think you have time, we recommend following the second option, you\u2019ll learn tons of new stuff! Secure your infrastructure. Don\u2019t forget to always follow the principle of least privilege. Create security groups for all your resources (Virtual Machines, DBs, etc.). Decide carefully which ports you open and who can access them. Create Service Principals to assign permissions to the applications. Estimate of the total cost of the infrastructure you created You can use the Azure Calculator or you can create an Excel sheet. Azure Pricing Calculator: https://azure.microsoft.com/en-us/pricing/calculator Recommended readings","title":"Azure"},{"location":"cloud-basics/azure/#cloud-basics","text":"This challenge aims to set up the cloud environment on which the project will run. Create a diagram that reflects the design of the infrastructure you will create in the next steps. Create the networking infrastructure on which your application will live. Setup a custom VNet. Create the subnets. Configure security for your subnets (Subnet Security Groups). Note: Because of constraints with the training Azure account, you may be required to use an existing networking infrastructure. In that case, explain your tutor each the elements involved and how they relate to each other. Make sure you don\u2019t skip this step; networking is an essential part of what we do! Create the compute infrastructure to support the application. Is recommended to separate front-end and back-end. Create Virtual Machines and install the applications Capture Images that contains the application and configurations. Create an Scale Set Create a LoadBalancer or and Application Gateway (Read about both and understand the differences, explain why you decided to use the one you deploy) Create LoadBalancer between Front-End and Back-End The expected behavior is: If you destroy one instance (or the application fails), another must be created automatically with the application running again. Note: If the application has any external service, like a database or cache system, you can either use a managed service by Azure (as SQL databases, or Azure Database for MySQL, etc.) Or install and manage the service by yourself. In a real production environment, we usually use managed services, but it's a great learning exercise to create all things by yourself. So, if you think you have time, we recommend following the second option, you\u2019ll learn tons of new stuff! Secure your infrastructure. Don\u2019t forget to always follow the principle of least privilege. Create security groups for all your resources (Virtual Machines, DBs, etc.). Decide carefully which ports you open and who can access them. Create Service Principals to assign permissions to the applications. Estimate of the total cost of the infrastructure you created You can use the Azure Calculator or you can create an Excel sheet. Azure Pricing Calculator: https://azure.microsoft.com/en-us/pricing/calculator","title":"Cloud Basics"},{"location":"cloud-basics/azure/#recommended-readings","text":"","title":"Recommended readings"}]}